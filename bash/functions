function alias-help() {
  echo "Alias Usage"
  echo
  echo " Rails"
  echo "  b          = bundle exec"
  echo "  be         = bundle exec"
  echo "  dbm        = rake db:migrate"
  echo "  rc         = bundle exec rails c"
  echo "  rd         = bundle exec rails dbconsole"
  echo "  rg         = bundle exec rails g"
  echo "  rr         = bundle exec rake routes | $EDITOR"
  echo "  rs         = bundle exec rails s"
  echo "  tdl        = tail -f log/development.log"
  echo "  ttl        = tail -f log/test.log"
  echo
  echo " Git"
  echo "   eg       = mate .git/config"
  echo "   ga       = git add"
  echo "   gb       = git branch"
  echo "   gba      = git branch -a"
  echo "   gbl      = function gbl() {}"
  echo "   gc       = git commit"
  echo "   gca      = git commit -a"
  echo "   gco      = git checkout"
  echo "   gd       = git diff"
  echo "   gdm      = git diff master"
  echo "   gdn      = git diff --name-status -r"
  echo "   gds      = git diff --stat -r"
  echo "   gdt      = git difftool -t opendiff -y"
  echo "   gdv      = git diff -w "$@" | vim -R -"
  echo "   gexport  = git archive --format zip --output"
  echo "   gll      = git log --graph --pretty=oneline --abbrev-commit"
  echo "   glo      = git log --stat"
  echo "   glog     = git log --oneline --graph --decorate"
  echo "   glop     = git log --pretty         = oneline"
  echo "   gnp      = git-notpushed"
  echo "   gp       = git push"
  echo "   gpl      = git pull"
  echo "   gr       = git remote"
  echo "   grm      = git status | grep deleted | awk {print \$3} | xargs git rm"
  echo "   grv      = git remote -v"
  echo "   gs       = git status"
  echo "   gui      = open -a sourcetree ."
  echo "   ungit    = find . -name .git -exec rm -rf {} \;"
}

# Lists the latest commit for each branch in the repo
function gbl() {
  for k in `/usr/local/bin/git branch|sed s/^..//`;do echo -e `git log -1 --pretty=format:"%Cgreen%ci %Cblue%cr%Creset" "$k"`\\t"$k";done|sort -r
}

# opens desktop folder in time machine backups
function ob() {
  tm_root=$1
  open "${tm_root}/Macintosh HD/Users/btoone/Desktop/"
}

# Adds an entry to a work log
function plog() {
  LOG="/path/to/log.txt";
  DATE=`date +"%A; %B %e, %Y"`;
  ENTRY="\n$DATE\n$1";
  echo -e $ENTRY >> $LOG;
}

# creates a rails app from template
function railsapp {
  template=$1
  appname=$2
  shift 2
  rails $appname -m http://github.com/btoone/rails-templates/raw/master/$template.rb $@
}

# quicker cd
function cr() {
  cd ~/code/$*
}

function cdc() { 
  cd $1; ls 
}

function mkc() { 
  mkdir -p "$1"
  cd "$1" 
}

# copy working directory
# Use this command then open a new terminal window or tab and paste into `cd`
function cwd () {
  pwd | pbcopy
}

function killnamed () { 
  ps ax | grep $1 | cut -d ' ' -f 2 | xargs kill 
}

function zipr() {
  zip -r $1.zip $1
}

## From Chris Wanstrath
function pless() { 
  pygmentize $1 | less -r 
}

## Commit pending changes and quote all args as message
function gg() { 
  git commit -v -a -m "$*"
}

## Git clone from GitHub
function gch() {
  git clone git://github.com/$USER/$1.git
}

## Setup a tracking branch from [remote] [branch_name]
function gbt() { 
  git branch --track $2 $1/$2 && git checkout $2 
}

## Quickly clobber a file and checkout
function grf() { 
  rm $1
  git checkout $1 
}

## Call from inside an initialized Git repo, with the name of the repo.
function new-git() {
  ssh git@example.com "mkdir $1.git && cd $1.git && git --bare init"
  git remote add origin git@example.com:$1.git
  git push origin master
  git config branch.master.remote origin
  git config branch.master.merge refs/heads/master
  git config push.default current
}

function markdown() { 
  /Applications/TextMate.app/Contents/SharedSupport/Support/bin/Markdown.pl $1 > $1.html 
}

# Syntax check Javascript

function jsc() { 
  jsl -conf /etc/jsl/jsl.conf -process $1 
}

# From http://github.com/suztomo/dotfiles

function rmf(){
  for file in $*
  do
      __rm_single_file $file
  done
}

function __rm_single_file(){
  if ! [ -d ~/.Trash/ ]
  then
      command /bin/mkdir ~/.Trash
  fi
  
  if ! [ $# -eq 1 ]
  then
      echo "__rm_single_file: 1 argument required but $# passed."
      exit
  fi
  
  if [ -e $1 ]
  then
      BASENAME=`basename $1`
      NAME=$BASENAME
      COUNT=0
      while [ -e ~/.Trash/$NAME ]
      do
          COUNT=$(($COUNT+1))
          NAME="$BASENAME.$COUNT"
      done
      
      command /bin/mv $1 ~/.Trash/$NAME
  else
      echo "No such file or directory: $file"
  fi
}